{"version":3,"sources":["../../src/SecureRoute.js"],"names":["SecureRoute","props","authService","authState","match","pendingLogin","isAuthenticated","current","isPending","login"],"mappings":";;;;;;;;;AAYA;;AACA;;AACA;;AAdA;;;;;;;;;;;AAgBA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAEC,KAAF,EAAa;AAAA,qBACI,+BADJ;AAAA,MACvBC,WADuB,gBACvBA,WADuB;AAAA,MACVC,SADU,gBACVA,SADU;;AAE/B,MAAMC,KAAK,GAAG,mCAAcH,KAAd,CAAd;AACA,MAAMI,YAAY,GAAG,mBAAO,KAAP,CAArB;AAEA,wBAAU,YAAM;AACd;AACA,QAAI,CAACD,KAAL,EAAY;AACV;AACD;;AAED,QAAID,SAAS,CAACG,eAAd,EAA+B;AAC7BD,MAAAA,YAAY,CAACE,OAAb,GAAuB,KAAvB;AACA;AACD,KATa,CAWd;;;AACA,QAAG,CAACJ,SAAS,CAACG,eAAX,IAA8B,CAACH,SAAS,CAACK,SAAzC,IAAsD,CAACH,YAAY,CAACE,OAAvE,EAAgF;AAC9EF,MAAAA,YAAY,CAACE,OAAb,GAAuB,IAAvB;AACAL,MAAAA,WAAW,CAACO,KAAZ;AACD;AACF,GAhBD,EAgBG,CAACN,SAAS,CAACK,SAAX,EAAsBL,SAAS,CAACG,eAAhC,EAAiDJ,WAAjD,EAA8DE,KAA9D,CAhBH;;AAkBA,MAAI,CAACD,SAAS,CAACG,eAAf,EAAgC;AAC9B,WAAO,IAAP;AACD;;AAED,sBACE,gCAAC,qBAAD,EACOL,KADP,CADF;AAKD,CAhCD;;eAkCeD,W","sourcesContent":["/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport React, { useEffect, useRef } from 'react';\nimport { useOktaAuth } from './OktaContext';\nimport { Route, useRouteMatch } from 'react-router-dom';\n\nconst SecureRoute = ( props ) => { \n  const { authService, authState } = useOktaAuth();\n  const match = useRouteMatch(props);\n  const pendingLogin = useRef(false);\n\n  useEffect(() => {\n    // Only process logic if the route matches\n    if (!match) {\n      return;\n    }\n\n    if (authState.isAuthenticated) {\n      pendingLogin.current = false;\n      return;\n    }\n\n    // Start login if app has decided it is not logged in and there is no pending signin\n    if(!authState.isAuthenticated && !authState.isPending && !pendingLogin.current) { \n      pendingLogin.current = true;\n      authService.login();\n    }\n  }, [authState.isPending, authState.isAuthenticated, authService, match]);\n\n  if (!authState.isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <Route\n      { ...props }\n    />\n  );\n};\n\nexport default SecureRoute;\n"],"file":"SecureRoute.js"}