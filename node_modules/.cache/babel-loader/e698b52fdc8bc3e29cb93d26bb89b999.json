{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\luanv\\\\xcel-wom-fe-c\\\\src\\\\components\\\\pages\\\\Home\\\\HomeContainer.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport RenderHomePage from './RenderHomePage';\n\nfunction HomeContainer({\n  LoadingComponent\n}) {\n  const {\n    authState,\n    authService\n  } = useOktaAuth();\n  const [userInfo, setUserInfo] = useState(null); // eslint-disable-next-line\n\n  const [memoAuthService] = useMemo(() => [authService], []);\n  useEffect(() => {\n    let isSubscribed = true;\n    memoAuthService.getUser().then(info => {\n      // if user is authenticated we can use the authService to snag some user info.\n      // isSubscribed is a boolean toggle that we're using to clean up our useEffect.\n      if (isSubscribed) {\n        setUserInfo(info);\n      }\n    }).catch(err => {\n      isSubscribed = false;\n      return setUserInfo(null);\n    });\n    return () => isSubscribed = false;\n  }, [memoAuthService]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, authState.isAuthenticated && !userInfo && /*#__PURE__*/React.createElement(LoadingComponent, {\n    message: \"Fetching user profile...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), authState.isAuthenticated && userInfo && /*#__PURE__*/React.createElement(RenderHomePage, {\n    userInfo: userInfo,\n    authService: authService,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default HomeContainer;","map":{"version":3,"sources":["C:/Users/luanv/xcel-wom-fe-c/src/components/pages/Home/HomeContainer.js"],"names":["React","useState","useEffect","useMemo","useOktaAuth","RenderHomePage","HomeContainer","LoadingComponent","authState","authService","userInfo","setUserInfo","memoAuthService","isSubscribed","getUser","then","info","catch","err","isAuthenticated"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA6C;AAC3C,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BL,WAAW,EAA9C;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC,CAF2C,CAG3C;;AACA,QAAM,CAACW,eAAD,IAAoBT,OAAO,CAAC,MAAM,CAACM,WAAD,CAAP,EAAsB,EAAtB,CAAjC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,YAAY,GAAG,IAAnB;AAEAD,IAAAA,eAAe,CACZE,OADH,GAEGC,IAFH,CAEQC,IAAI,IAAI;AACZ;AACA;AACA,UAAIH,YAAJ,EAAkB;AAChBF,QAAAA,WAAW,CAACK,IAAD,CAAX;AACD;AACF,KARH,EASGC,KATH,CASSC,GAAG,IAAI;AACZL,MAAAA,YAAY,GAAG,KAAf;AACA,aAAOF,WAAW,CAAC,IAAD,CAAlB;AACD,KAZH;AAaA,WAAO,MAAOE,YAAY,GAAG,KAA7B;AACD,GAjBQ,EAiBN,CAACD,eAAD,CAjBM,CAAT;AAmBA,sBACE,0CACGJ,SAAS,CAACW,eAAV,IAA6B,CAACT,QAA9B,iBACC,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAC,0BAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAIGF,SAAS,CAACW,eAAV,IAA6BT,QAA7B,iBACC,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEA,QAA1B;AAAoC,IAAA,WAAW,EAAED,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADF;AAUD;;AAED,eAAeH,aAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useOktaAuth } from '@okta/okta-react';\r\n\r\nimport RenderHomePage from './RenderHomePage';\r\n\r\nfunction HomeContainer({ LoadingComponent }) {\r\n  const { authState, authService } = useOktaAuth();\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  // eslint-disable-next-line\r\n  const [memoAuthService] = useMemo(() => [authService], []);\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n\r\n    memoAuthService\r\n      .getUser()\r\n      .then(info => {\r\n        // if user is authenticated we can use the authService to snag some user info.\r\n        // isSubscribed is a boolean toggle that we're using to clean up our useEffect.\r\n        if (isSubscribed) {\r\n          setUserInfo(info);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        isSubscribed = false;\r\n        return setUserInfo(null);\r\n      });\r\n    return () => (isSubscribed = false);\r\n  }, [memoAuthService]);\r\n\r\n  return (\r\n    <>\r\n      {authState.isAuthenticated && !userInfo && (\r\n        <LoadingComponent message=\"Fetching user profile...\" />\r\n      )}\r\n      {authState.isAuthenticated && userInfo && (\r\n        <RenderHomePage userInfo={userInfo} authService={authService} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HomeContainer;\r\n"]},"metadata":{},"sourceType":"module"}