{"ast":null,"code":"import axios from 'axios'; // we will define a bunch of API calls here.\n\nconst apiUrl = `${process.env.REACT_APP_API_URI}/profiles`;\n\nconst sleep = time => new Promise(resolve => {\n  setTimeout(resolve, time);\n});\n\nconst getExampleData = () => {\n  return axios.get(`https://jsonplaceholder.typicode.com/photos?albumId=1`).then(response => response.data);\n};\n\nconst getAuthHeader = authState => {\n  if (!authState.isAuthenticated) {\n    throw new Error('Not authenticated');\n  }\n\n  return {\n    Authorization: `Bearer ${authState.idToken}`\n  };\n};\n\nconst getDSData = (url, authState) => {\n  // here's another way you can compose together your API calls.\n  // Note the use of GetAuthHeader here is a little different than in the getProfileData call.\n  const headers = getAuthHeader(authState);\n\n  if (!url) {\n    throw new Error('No URL provided');\n  }\n\n  return axios.get(url, {\n    headers\n  }).then(res => JSON.parse(res.data)).catch(err => err);\n};\n\nconst apiAuthGet = authHeader => {\n  return axios.get(apiUrl, {\n    headers: authHeader\n  });\n};\n\nconst getProfileData = authState => {\n  try {\n    return apiAuthGet(getAuthHeader(authState)).then(response => response.data);\n  } catch (error) {\n    return new Promise(() => {\n      console.log(error);\n      return [];\n    });\n  }\n};\n\nexport { sleep, getExampleData, getProfileData, getDSData };","map":{"version":3,"sources":["C:/Users/luanv/xcel-wom-fe-c/src/api/index.js"],"names":["axios","apiUrl","process","env","REACT_APP_API_URI","sleep","time","Promise","resolve","setTimeout","getExampleData","get","then","response","data","getAuthHeader","authState","isAuthenticated","Error","Authorization","idToken","getDSData","url","headers","res","JSON","parse","catch","err","apiAuthGet","authHeader","getProfileData","error","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,MAAM,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,WAAhD;;AAEA,MAAMC,KAAK,GAAGC,IAAI,IAChB,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACrBC,EAAAA,UAAU,CAACD,OAAD,EAAUF,IAAV,CAAV;AACD,CAFD,CADF;;AAKA,MAAMI,cAAc,GAAG,MAAM;AAC3B,SAAOV,KAAK,CACTW,GADI,CACC,uDADD,EAEJC,IAFI,CAECC,QAAQ,IAAIA,QAAQ,CAACC,IAFtB,CAAP;AAGD,CAJD;;AAMA,MAAMC,aAAa,GAAGC,SAAS,IAAI;AACjC,MAAI,CAACA,SAAS,CAACC,eAAf,EAAgC;AAC9B,UAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,SAAO;AAAEC,IAAAA,aAAa,EAAG,UAASH,SAAS,CAACI,OAAQ;AAA7C,GAAP;AACD,CALD;;AAOA,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMN,SAAN,KAAoB;AACpC;AACA;AACA,QAAMO,OAAO,GAAGR,aAAa,CAACC,SAAD,CAA7B;;AACA,MAAI,CAACM,GAAL,EAAU;AACR,UAAM,IAAIJ,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,SAAOlB,KAAK,CACTW,GADI,CACAW,GADA,EACK;AAAEC,IAAAA;AAAF,GADL,EAEJX,IAFI,CAECY,GAAG,IAAIC,IAAI,CAACC,KAAL,CAAWF,GAAG,CAACV,IAAf,CAFR,EAGJa,KAHI,CAGEC,GAAG,IAAIA,GAHT,CAAP;AAID,CAXD;;AAaA,MAAMC,UAAU,GAAGC,UAAU,IAAI;AAC/B,SAAO9B,KAAK,CAACW,GAAN,CAAUV,MAAV,EAAkB;AAAEsB,IAAAA,OAAO,EAAEO;AAAX,GAAlB,CAAP;AACD,CAFD;;AAIA,MAAMC,cAAc,GAAGf,SAAS,IAAI;AAClC,MAAI;AACF,WAAOa,UAAU,CAACd,aAAa,CAACC,SAAD,CAAd,CAAV,CAAqCJ,IAArC,CAA0CC,QAAQ,IAAIA,QAAQ,CAACC,IAA/D,CAAP;AACD,GAFD,CAEE,OAAOkB,KAAP,EAAc;AACd,WAAO,IAAIzB,OAAJ,CAAY,MAAM;AACvB0B,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAO,EAAP;AACD,KAHM,CAAP;AAID;AACF,CATD;;AAWA,SAAS3B,KAAT,EAAgBK,cAAhB,EAAgCqB,cAAhC,EAAgDV,SAAhD","sourcesContent":["import axios from 'axios';\r\n\r\n// we will define a bunch of API calls here.\r\nconst apiUrl = `${process.env.REACT_APP_API_URI}/profiles`;\r\n\r\nconst sleep = time =>\r\n  new Promise(resolve => {\r\n    setTimeout(resolve, time);\r\n  });\r\n\r\nconst getExampleData = () => {\r\n  return axios\r\n    .get(`https://jsonplaceholder.typicode.com/photos?albumId=1`)\r\n    .then(response => response.data);\r\n};\r\n\r\nconst getAuthHeader = authState => {\r\n  if (!authState.isAuthenticated) {\r\n    throw new Error('Not authenticated');\r\n  }\r\n  return { Authorization: `Bearer ${authState.idToken}` };\r\n};\r\n\r\nconst getDSData = (url, authState) => {\r\n  // here's another way you can compose together your API calls.\r\n  // Note the use of GetAuthHeader here is a little different than in the getProfileData call.\r\n  const headers = getAuthHeader(authState);\r\n  if (!url) {\r\n    throw new Error('No URL provided');\r\n  }\r\n  return axios\r\n    .get(url, { headers })\r\n    .then(res => JSON.parse(res.data))\r\n    .catch(err => err);\r\n};\r\n\r\nconst apiAuthGet = authHeader => {\r\n  return axios.get(apiUrl, { headers: authHeader });\r\n};\r\n\r\nconst getProfileData = authState => {\r\n  try {\r\n    return apiAuthGet(getAuthHeader(authState)).then(response => response.data);\r\n  } catch (error) {\r\n    return new Promise(() => {\r\n      console.log(error);\r\n      return [];\r\n    });\r\n  }\r\n};\r\n\r\nexport { sleep, getExampleData, getProfileData, getDSData };\r\n"]},"metadata":{},"sourceType":"module"}