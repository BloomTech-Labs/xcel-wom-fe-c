{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\luanv\\\\xcel-wom-fe-c\\\\src\\\\components\\\\pages\\\\Login\\\\LoginContainer.js\";\nimport React, { useEffect } from 'react';\nimport OktaSignIn from '@okta/okta-signin-widget';\nimport '@okta/okta-signin-widget/dist/css/okta-sign-in.min.css';\nimport { config } from '../../../utils/oktaConfig';\n\nconst LoginContainer = () => {\n  useEffect(() => {\n    const {\n      pkce,\n      issuer,\n      clientId,\n      redirectUri,\n      scopes\n    } = config; // destructure your config so that you can pass it into the required fields in your widget.\n\n    const widget = new OktaSignIn({\n      baseUrl: issuer ? issuer.split('/oauth2')[0] : '',\n      clientId,\n      redirectUri,\n      registration: {// there is more we can do to handle some errors here.\n      },\n      features: {\n        registration: false\n      },\n      // turning this feature on allows your widget to use Okta for user registration\n      logo: 'path-to-your-logo',\n      // add your custom logo to your signing/register widget here.\n      i18n: {\n        en: {\n          'primaryauth.title': 'Please sign in' // change title for your app\n\n        }\n      },\n      authParams: {\n        pkce,\n        issuer,\n        display: 'page',\n        scopes\n      }\n    });\n    widget.renderEl({\n      el: '#sign-in-widget'\n    }, () => {\n      /**\r\n       * In this flow, the success handler will not be called because we redirect\r\n       * to the Okta org for the authentication workflow.\r\n       */\n    }, err => {\n      throw err;\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"sign-in-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default LoginContainer;","map":{"version":3,"sources":["C:/Users/luanv/xcel-wom-fe-c/src/components/pages/Login/LoginContainer.js"],"names":["React","useEffect","OktaSignIn","config","LoginContainer","pkce","issuer","clientId","redirectUri","scopes","widget","baseUrl","split","registration","features","logo","i18n","en","authParams","display","renderEl","el","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAO,wDAAP;AAEA,SAASC,MAAT,QAAuB,2BAAvB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3BH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEI,MAAAA,IAAF;AAAQC,MAAAA,MAAR;AAAgBC,MAAAA,QAAhB;AAA0BC,MAAAA,WAA1B;AAAuCC,MAAAA;AAAvC,QAAkDN,MAAxD,CADc,CAEd;;AACA,UAAMO,MAAM,GAAG,IAAIR,UAAJ,CAAe;AAC5BS,MAAAA,OAAO,EAAEL,MAAM,GAAGA,MAAM,CAACM,KAAP,CAAa,SAAb,EAAwB,CAAxB,CAAH,GAAgC,EADnB;AAE5BL,MAAAA,QAF4B;AAG5BC,MAAAA,WAH4B;AAI5BK,MAAAA,YAAY,EAAE,CACZ;AADY,OAJc;AAO5BC,MAAAA,QAAQ,EAAE;AAAED,QAAAA,YAAY,EAAE;AAAhB,OAPkB;AAQ5B;AACAE,MAAAA,IAAI,EAAE,mBATsB;AAU5B;AACAC,MAAAA,IAAI,EAAE;AACJC,QAAAA,EAAE,EAAE;AACF,+BAAqB,gBADnB,CAEF;;AAFE;AADA,OAXsB;AAiB5BC,MAAAA,UAAU,EAAE;AACVb,QAAAA,IADU;AAEVC,QAAAA,MAFU;AAGVa,QAAAA,OAAO,EAAE,MAHC;AAIVV,QAAAA;AAJU;AAjBgB,KAAf,CAAf;AAyBAC,IAAAA,MAAM,CAACU,QAAP,CACE;AAAEC,MAAAA,EAAE,EAAE;AAAN,KADF,EAEE,MAAM;AACJ;AACR;AACA;AACA;AACO,KAPH,EAQEC,GAAG,IAAI;AACL,YAAMA,GAAN;AACD,KAVH;AAYD,GAxCQ,EAwCN,EAxCM,CAAT;AA0CA,sBAAO;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA5CD;;AA8CA,eAAelB,cAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport OktaSignIn from '@okta/okta-signin-widget';\r\nimport '@okta/okta-signin-widget/dist/css/okta-sign-in.min.css';\r\n\r\nimport { config } from '../../../utils/oktaConfig';\r\n\r\nconst LoginContainer = () => {\r\n  useEffect(() => {\r\n    const { pkce, issuer, clientId, redirectUri, scopes } = config;\r\n    // destructure your config so that you can pass it into the required fields in your widget.\r\n    const widget = new OktaSignIn({\r\n      baseUrl: issuer ? issuer.split('/oauth2')[0] : '',\r\n      clientId,\r\n      redirectUri,\r\n      registration: {\r\n        // there is more we can do to handle some errors here.\r\n      },\r\n      features: { registration: false },\r\n      // turning this feature on allows your widget to use Okta for user registration\r\n      logo: 'path-to-your-logo',\r\n      // add your custom logo to your signing/register widget here.\r\n      i18n: {\r\n        en: {\r\n          'primaryauth.title': 'Please sign in',\r\n          // change title for your app\r\n        },\r\n      },\r\n      authParams: {\r\n        pkce,\r\n        issuer,\r\n        display: 'page',\r\n        scopes,\r\n      },\r\n    });\r\n\r\n    widget.renderEl(\r\n      { el: '#sign-in-widget' },\r\n      () => {\r\n        /**\r\n         * In this flow, the success handler will not be called because we redirect\r\n         * to the Okta org for the authentication workflow.\r\n         */\r\n      },\r\n      err => {\r\n        throw err;\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  return <div id=\"sign-in-widget\" />;\r\n};\r\n\r\nexport default LoginContainer;\r\n"]},"metadata":{},"sourceType":"module"}