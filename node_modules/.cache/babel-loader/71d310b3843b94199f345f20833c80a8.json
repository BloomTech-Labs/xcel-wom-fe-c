{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\luanv\\\\xcel-wom-fe-c\\\\src\\\\components\\\\common\\\\List.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'; // Here is an example of a reusable list component.\n// We are passing all of its functions through props to keep our component clean & testable\n// Feel free to add to this component with some more advanced features of your own\n\nconst List = ({\n  LoadingComponent,\n  RenderItems,\n  getItemsData\n}) => {\n  const [items, setItems] = useState([]);\n  const [isFetching, setFetching] = useState(true);\n  useEffect(() => {\n    // Here we are performing our GET request through the use of our\n    // Axios helper function that we will receive through props\n    getItemsData().then(items => {\n      setItems(items);\n    }).catch(error => {\n      console.error(error); // Be sure to add functionality that displays errors to your UI here.\n      // We want our users to know whether something has gone wrong with our request.\n    }).finally(() => {\n      setFetching(false);\n    });\n  }, [getItemsData]); // Here we return a loading component while our request is fetching\n  // or we render our list of items from the data we receive from our successful request\n  // We can change and swap these out through props!\n\n  return isFetching ? /*#__PURE__*/React.createElement(LoadingComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(RenderItems, {\n    data: items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 46\n    }\n  });\n};\n\nexport default List;\nList.propTypes = {\n  LoadingComponent: PropTypes.func.isRequired,\n  RenderItems: PropTypes.func.isRequired,\n  getItemsData: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["C:/Users/luanv/xcel-wom-fe-c/src/components/common/List.js"],"names":["React","useState","useEffect","PropTypes","List","LoadingComponent","RenderItems","getItemsData","items","setItems","isFetching","setFetching","then","catch","error","console","finally","propTypes","func","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA,WAApB;AAAiCC,EAAAA;AAAjC,CAAD,KAAqD;AAChE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,UAAD,EAAaC,WAAb,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAK,IAAAA,YAAY,GACTK,IADH,CACQJ,KAAK,IAAI;AACbC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAHH,EAIGK,KAJH,CAISC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd,EADc,CAEd;AACA;AACD,KARH,EASGE,OATH,CASW,MAAM;AACbL,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAXH;AAYD,GAfQ,EAeN,CAACJ,YAAD,CAfM,CAAT,CAJgE,CAqBhE;AACA;AACA;;AACA,SAAOG,UAAU,gBAAG,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBAA0B,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAEF,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA3C;AACD,CAzBD;;AA2BA,eAAeJ,IAAf;AAEAA,IAAI,CAACa,SAAL,GAAiB;AACfZ,EAAAA,gBAAgB,EAAEF,SAAS,CAACe,IAAV,CAAeC,UADlB;AAEfb,EAAAA,WAAW,EAAEH,SAAS,CAACe,IAAV,CAAeC,UAFb;AAGfZ,EAAAA,YAAY,EAAEJ,SAAS,CAACe,IAAV,CAAeC;AAHd,CAAjB","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Here is an example of a reusable list component.\r\n// We are passing all of its functions through props to keep our component clean & testable\r\n// Feel free to add to this component with some more advanced features of your own\r\nconst List = ({ LoadingComponent, RenderItems, getItemsData }) => {\r\n  const [items, setItems] = useState([]);\r\n  const [isFetching, setFetching] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Here we are performing our GET request through the use of our\r\n    // Axios helper function that we will receive through props\r\n    getItemsData()\r\n      .then(items => {\r\n        setItems(items);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        // Be sure to add functionality that displays errors to your UI here.\r\n        // We want our users to know whether something has gone wrong with our request.\r\n      })\r\n      .finally(() => {\r\n        setFetching(false);\r\n      });\r\n  }, [getItemsData]);\r\n\r\n  // Here we return a loading component while our request is fetching\r\n  // or we render our list of items from the data we receive from our successful request\r\n  // We can change and swap these out through props!\r\n  return isFetching ? <LoadingComponent /> : <RenderItems data={items} />;\r\n};\r\n\r\nexport default List;\r\n\r\nList.propTypes = {\r\n  LoadingComponent: PropTypes.func.isRequired,\r\n  RenderItems: PropTypes.func.isRequired,\r\n  getItemsData: PropTypes.func.isRequired,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}